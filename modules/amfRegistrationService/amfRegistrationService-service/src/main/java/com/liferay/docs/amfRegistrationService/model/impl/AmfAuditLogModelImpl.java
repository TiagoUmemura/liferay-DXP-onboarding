/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.docs.amfRegistrationService.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.docs.amfRegistrationService.model.AmfAuditLog;
import com.liferay.docs.amfRegistrationService.model.AmfAuditLogModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AmfAuditLog service. Represents a row in the &quot;AmfAuditLog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link AmfAuditLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AmfAuditLogImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AmfAuditLogImpl
 * @see AmfAuditLog
 * @see AmfAuditLogModel
 * @generated
 */
@ProviderType
public class AmfAuditLogModelImpl extends BaseModelImpl<AmfAuditLog>
	implements AmfAuditLogModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a amf audit log model instance should use the {@link AmfAuditLog} interface instead.
	 */
	public static final String TABLE_NAME = "AmfAuditLog";
	public static final Object[][] TABLE_COLUMNS = {
			{ "amfAuditLogId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "dateTime", Types.TIMESTAMP },
			{ "eventType", Types.VARCHAR },
			{ "ipAddress", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("amfAuditLogId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("eventType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ipAddress", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table AmfAuditLog (amfAuditLogId LONG not null primary key,userId LONG,userName VARCHAR(75) null,dateTime DATE null,eventType VARCHAR(75) null,ipAddress VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table AmfAuditLog";
	public static final String ORDER_BY_JPQL = " ORDER BY amfAuditLog.dateTime DESC";
	public static final String ORDER_BY_SQL = " ORDER BY AmfAuditLog.dateTime DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.docs.amfRegistrationService.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.docs.amfRegistrationService.model.AmfAuditLog"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.docs.amfRegistrationService.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.docs.amfRegistrationService.model.AmfAuditLog"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.docs.amfRegistrationService.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.docs.amfRegistrationService.model.AmfAuditLog"),
			true);
	public static final long EVENTTYPE_COLUMN_BITMASK = 1L;
	public static final long USERID_COLUMN_BITMASK = 2L;
	public static final long USERNAME_COLUMN_BITMASK = 4L;
	public static final long DATETIME_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.docs.amfRegistrationService.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.docs.amfRegistrationService.model.AmfAuditLog"));

	public AmfAuditLogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _amfAuditLogId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAmfAuditLogId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _amfAuditLogId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AmfAuditLog.class;
	}

	@Override
	public String getModelClassName() {
		return AmfAuditLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("amfAuditLogId", getAmfAuditLogId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("dateTime", getDateTime());
		attributes.put("eventType", getEventType());
		attributes.put("ipAddress", getIpAddress());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long amfAuditLogId = (Long)attributes.get("amfAuditLogId");

		if (amfAuditLogId != null) {
			setAmfAuditLogId(amfAuditLogId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date dateTime = (Date)attributes.get("dateTime");

		if (dateTime != null) {
			setDateTime(dateTime);
		}

		String eventType = (String)attributes.get("eventType");

		if (eventType != null) {
			setEventType(eventType);
		}

		String ipAddress = (String)attributes.get("ipAddress");

		if (ipAddress != null) {
			setIpAddress(ipAddress);
		}
	}

	@Override
	public long getAmfAuditLogId() {
		return _amfAuditLogId;
	}

	@Override
	public void setAmfAuditLogId(long amfAuditLogId) {
		_amfAuditLogId = amfAuditLogId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_columnBitmask |= USERNAME_COLUMN_BITMASK;

		if (_originalUserName == null) {
			_originalUserName = _userName;
		}

		_userName = userName;
	}

	public String getOriginalUserName() {
		return GetterUtil.getString(_originalUserName);
	}

	@Override
	public Date getDateTime() {
		return _dateTime;
	}

	@Override
	public void setDateTime(Date dateTime) {
		_columnBitmask = -1L;

		_dateTime = dateTime;
	}

	@Override
	public String getEventType() {
		if (_eventType == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventType;
		}
	}

	@Override
	public void setEventType(String eventType) {
		_columnBitmask |= EVENTTYPE_COLUMN_BITMASK;

		if (_originalEventType == null) {
			_originalEventType = _eventType;
		}

		_eventType = eventType;
	}

	public String getOriginalEventType() {
		return GetterUtil.getString(_originalEventType);
	}

	@Override
	public String getIpAddress() {
		if (_ipAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _ipAddress;
		}
	}

	@Override
	public void setIpAddress(String ipAddress) {
		_ipAddress = ipAddress;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AmfAuditLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AmfAuditLog toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AmfAuditLog)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AmfAuditLogImpl amfAuditLogImpl = new AmfAuditLogImpl();

		amfAuditLogImpl.setAmfAuditLogId(getAmfAuditLogId());
		amfAuditLogImpl.setUserId(getUserId());
		amfAuditLogImpl.setUserName(getUserName());
		amfAuditLogImpl.setDateTime(getDateTime());
		amfAuditLogImpl.setEventType(getEventType());
		amfAuditLogImpl.setIpAddress(getIpAddress());

		amfAuditLogImpl.resetOriginalValues();

		return amfAuditLogImpl;
	}

	@Override
	public int compareTo(AmfAuditLog amfAuditLog) {
		int value = 0;

		value = DateUtil.compareTo(getDateTime(), amfAuditLog.getDateTime());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AmfAuditLog)) {
			return false;
		}

		AmfAuditLog amfAuditLog = (AmfAuditLog)obj;

		long primaryKey = amfAuditLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AmfAuditLogModelImpl amfAuditLogModelImpl = this;

		amfAuditLogModelImpl._originalUserId = amfAuditLogModelImpl._userId;

		amfAuditLogModelImpl._setOriginalUserId = false;

		amfAuditLogModelImpl._originalUserName = amfAuditLogModelImpl._userName;

		amfAuditLogModelImpl._originalEventType = amfAuditLogModelImpl._eventType;

		amfAuditLogModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AmfAuditLog> toCacheModel() {
		AmfAuditLogCacheModel amfAuditLogCacheModel = new AmfAuditLogCacheModel();

		amfAuditLogCacheModel.amfAuditLogId = getAmfAuditLogId();

		amfAuditLogCacheModel.userId = getUserId();

		amfAuditLogCacheModel.userName = getUserName();

		String userName = amfAuditLogCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			amfAuditLogCacheModel.userName = null;
		}

		Date dateTime = getDateTime();

		if (dateTime != null) {
			amfAuditLogCacheModel.dateTime = dateTime.getTime();
		}
		else {
			amfAuditLogCacheModel.dateTime = Long.MIN_VALUE;
		}

		amfAuditLogCacheModel.eventType = getEventType();

		String eventType = amfAuditLogCacheModel.eventType;

		if ((eventType != null) && (eventType.length() == 0)) {
			amfAuditLogCacheModel.eventType = null;
		}

		amfAuditLogCacheModel.ipAddress = getIpAddress();

		String ipAddress = amfAuditLogCacheModel.ipAddress;

		if ((ipAddress != null) && (ipAddress.length() == 0)) {
			amfAuditLogCacheModel.ipAddress = null;
		}

		return amfAuditLogCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{amfAuditLogId=");
		sb.append(getAmfAuditLogId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", dateTime=");
		sb.append(getDateTime());
		sb.append(", eventType=");
		sb.append(getEventType());
		sb.append(", ipAddress=");
		sb.append(getIpAddress());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.liferay.docs.amfRegistrationService.model.AmfAuditLog");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>amfAuditLogId</column-name><column-value><![CDATA[");
		sb.append(getAmfAuditLogId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateTime</column-name><column-value><![CDATA[");
		sb.append(getDateTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventType</column-name><column-value><![CDATA[");
		sb.append(getEventType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ipAddress</column-name><column-value><![CDATA[");
		sb.append(getIpAddress());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = AmfAuditLog.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			AmfAuditLog.class
		};
	private long _amfAuditLogId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private String _originalUserName;
	private Date _dateTime;
	private String _eventType;
	private String _originalEventType;
	private String _ipAddress;
	private long _columnBitmask;
	private AmfAuditLog _escapedModel;
}